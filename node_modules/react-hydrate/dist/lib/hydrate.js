'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isServer = typeof window === 'undefined';

exports.default = function (dataLoader) {
  var mapStateToProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (s) {
    return s;
  };
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return function (Comp) {
    var _class, _temp;

    var opts = _extends({
      ssr: true,
      displayName: Comp.name || Comp.displayName,
      onError: function onError(err, details, displayName) {
        console.error('react-hydrate \u2013 ' + details + ' @\xA0hydrate(' + displayName + ')', err); // eslint-disable-line no-irregular-whitespace
      }
    }, options);

    return _temp = _class = function (_React$Component) {
      _inherits(Hydrate, _React$Component);

      _createClass(Hydrate, [{
        key: 'load',


        /**
         * Re-evaluate dataLoader with
         * a given set of props. This is called
         * in the event the initial mapStateToProps
         * call returns a falsy value, and when
         * props update in componentWillReceiveProps.
         */
        value: function load(props) {
          var addLoader = this.context.hydrate.store.addLoader;


          return addLoader([dataLoader, props]);
        }
      }]);

      function Hydrate(props, context) {
        _classCallCheck(this, Hydrate);

        var _this = _possibleConstructorReturn(this, (Hydrate.__proto__ || Object.getPrototypeOf(Hydrate)).call(this, props, context));

        var state = {};

        try {
          var s = mapStateToProps(_this.context.hydrate.store.getState(), props);

          if (s) {
            state = {
              loading: false,
              data: s
            };
          }
        } catch (err) {
          opts.onError(err, 'mapStateToProps threw an error', opts.displayName);
        }

        _this.state = _extends({
          loading: true,
          data: null
        }, state);

        /**
         * Skip loader for SSR
         */
        if (isServer && !opts.ssr) return _possibleConstructorReturn(_this);

        /**
         * Called during SSR. On the
         * frontend, we'll just call
         * setState ASAP.
         */
        if (isServer) {
          _this.componentWillMount = function () {
            _this.cache && _this.setState({
              loading: false,
              data: _this.cache
            });
          };
        }

        /**
         * Even if data is hydrated after SSR,
         * we need to push the loader into the
         * hash so that it's in memory for
         * future load calls
         */
        _this.resolver = _this.load(props || {}).then(function (state) {
          var s = void 0;

          try {
            s = mapStateToProps(state, props);
          } catch (err) {
            opts.onError(err, 'mapStateToProps threw an error', opts.displayName);
          }

          /**
           * If we're on the server,
           * set the local cache to next
           * render pass. Otherwise,
           * setState whenever the data
           * comes back.
           */
          isServer ? _this.cache = s : _this.setState({
            loading: false,
            data: s
          });

          return true;
        }).catch(function (err) {
          opts.onError(err, 'dataLoader function threw an error', opts.displayName);
        });
        return _this;
      }

      /**
       * Reload data if props have changed
       */


      _createClass(Hydrate, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props) {
          var _this2 = this;

          !(0, _deepEqual2.default)(this.props, props) && this.load(props).then(function (state) {
            return _this2.setState({
              loading: false,
              data: mapStateToProps(state, props)
            });
          });
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(Comp, _extends({}, this.props, this.state));
        }
      }]);

      return Hydrate;
    }(_react2.default.Component), _class.contextTypes = {
      hydrate: _propTypes2.default.shape({
        store: _propTypes2.default.shape({
          getState: _propTypes2.default.func.isRequired,
          addLoader: _propTypes2.default.func.isRequired
        }).isRequired
      }).isRequired }, _temp;
  };
};