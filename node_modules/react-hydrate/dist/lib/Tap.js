'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _store = require('./store.js');

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tap = function (_React$Component) {
  _inherits(Tap, _React$Component);

  _createClass(Tap, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        hydrate: {
          store: this.store,
          root: this.props.children,
          hydrateStore: this.hydrateStore.bind(this)
        }
      };
    }
  }]);

  function Tap(props) {
    _classCallCheck(this, Tap);

    var _this = _possibleConstructorReturn(this, (Tap.__proto__ || Object.getPrototypeOf(Tap)).call(this, props));

    var _this$props$hydrate = _this.props.hydrate,
        hydrate = _this$props$hydrate === undefined ? {} : _this$props$hydrate;

    /**
     * Create new store with hydrated
     * store or an empty object
     */

    _this.hydrateStore(hydrate);
    return _this;
  }

  /**
   * This needs to allow you to pass
   * a "hot" store (one already in memory)
   * in order to prefetch data, hence the
   * check for the `getState` method.
   * Otherwise, we're just creating a
   * fresh store here.
   */


  _createClass(Tap, [{
    key: 'hydrateStore',
    value: function hydrateStore() {
      var hydrate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.store = hydrate.getState ? hydrate : (0, _store2.default)(hydrate);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.Children.only(this.props.children);
    }
  }]);

  return Tap;
}(_react2.default.Component);

Tap.childContextTypes = {
  hydrate: _propTypes2.default.shape({
    store: _propTypes2.default.shape({
      getState: _propTypes2.default.func.isRequired,
      clearState: _propTypes2.default.func.isRequired,
      addLoader: _propTypes2.default.func.isRequired
    }).isRequired,
    root: _propTypes2.default.object.isRequired,
    hydrateStore: _propTypes2.default.func.isRequired
  }).isRequired
};
exports.default = Tap;