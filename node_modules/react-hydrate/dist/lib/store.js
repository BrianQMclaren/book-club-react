'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var hydrate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var state = hydrate;
  var loaders = [];

  var methods = {
    getState: function getState() {
      return state;
    },
    clearState: function clearState() {
      state = {};
      loaders = [];
    },

    /**
     * Add a loader and props to
     * the loader hash.
     *
     * @param {array} config [ loader, props ] signature
     */
    addLoader: function addLoader(config) {
      var resolve = void 0;

      var _config = _slicedToArray(config, 2),
          loader = _config[0],
          props = _config[1];

      /**
       * Check for loader fn() equality,
       * then check if props match. If both,
       * then we've loaded this data before
       */


      var exists = loaders.filter(function (L) {
        if (L[0] === loader) {
          return (0, _deepEqual2.default)(L[1], props);
        }

        return false;
      })[0];

      /**
       * If it exists, just
       * return the resolved promise.
       * Otherwise, create new resolve
       * value and push to loaders array.
       * Return promise to component
       * to hydrate once resolved.
       */
      if (exists) {
        var _exists = _slicedToArray(exists, 3);

        loader = _exists[0];
        props = _exists[1];
        resolve = _exists[2];
      } else {
        resolve = Promise.resolve(loader(props, state)).then(function (data) {
          state = _extends({}, state, data);
          return state;
        });

        loaders.push([loader, props, resolve]);
      }

      return resolve;
    }
  };

  return methods;
};